<template>
    <div class="contain mission">
        <el-form :inline="true" ref="form1" :model="formInline" :rules="rules" class="demo-form-inline missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- int类型 -->
            <el-form-item label="小区" prop="bscIDCellId">
                <el-select v-model="formInline.bscIDCellId" placeholder="请选择小区" :disabled="unEdit">
                    <el-option
                      v-for="item in cellList"
                      :key="item.cellID"
                      :label="item.bscName+ '/' + item.cellName+ '  '+item.haveMission"
                      :value="item.bscID+ '/' + item.cellID">
                    </el-option>
                </el-select>
            </el-form-item>
            <!-- string类型 -->
            <el-form-item label="任务名称" prop="taskName">
                <el-input v-model="formInline.taskName"></el-input>
            </el-form-item>
        </el-form>
        <el-form :inline="true" :rules="rules" :model="formInline" ref="form2" class="demo-form-inline missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- double类型 -->
            <el-form-item label="拍摄经度" prop="takePhotoLongitude">
                <el-input v-model="formInline.takePhotoLongitude"></el-input>
            </el-form-item>
             <!-- double类型 -->
            <el-form-item label="拍摄纬度" prop="takePhotoLatitude">
                <el-input v-model="formInline.takePhotoLatitude"></el-input>
            </el-form-item>
        </el-form>
        <el-form :inline="true" ref="form3" :model="formInline" :rules="rules" class="demo-form-inline missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- double类型 -->
            <el-form-item label="海拔高度" prop="takePhotoAltitude">
              <el-input v-model="formInline.takePhotoAltitude"></el-input>
                <!-- <el-select v-model="formInline.takePhotoAltitude" placeholder="请选择活动区域">
                    <el-option label="200米" value=200></el-option>
                    <el-option label="400米" value=400></el-option>
                </el-select> -->
            </el-form-item>
            <!-- float类型 -->
            <el-form-item label="拍摄下倾角" prop="takePhotoElevationAngle">
              <el-input v-model="formInline.takePhotoElevationAngle"></el-input>
            </el-form-item>
        </el-form>
        <el-form :inline="true"  :model="formInline" ref="form4" :rules="rules" class="demo-form-inline missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- float类型 -->
            <el-form-item label="拍摄方向角起点" prop="takePhotoDirectAngleBegin">
                <el-input v-model="formInline.takePhotoDirectAngleBegin"></el-input>
            </el-form-item>
            <!-- float类型 -->
            <el-form-item label="拍摄方向角终点" prop="takePhotoDirectAngleEnd">
                <el-input v-model="formInline.takePhotoDirectAngleEnd"></el-input>
            </el-form-item>
        </el-form>
        <el-form :inline="true" :model="formInline" ref="form5" :rules="rules" class="demo-form-inline missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- float类型 -->
            <el-form-item label="拍摄偏移角" prop="takePhotoDirectAngleRotate">
              <el-input v-model="formInline.takePhotoDirectAngleRotate"></el-input>
                <!-- <el-select v-model.number="formInline.takePhotoDirectAngleRotate" placeholder="请选择旋转角度">
                    <el-option label="15.5" value=15.5></el-option>
                    <el-option label="20" value=20></el-option>
                </el-select> -->
            </el-form-item>
            <!-- int类型 -->
            <el-form-item label="拍摄图片数" prop="takePhotoNum">
                <el-input v-model="formInline.takePhotoNum" disabled></el-input>
            </el-form-item>
        </el-form>
        <el-form :inline="true" ref="form6" :model="formInline" :rules="rules" class="demo-form-inline secondForm missionStyle demo-ruleForm" size="mini" label-width="120px">
            <!-- string类型 -->
            <el-form-item label="接收人" prop="taskConsumerID">
                <el-select v-model="formInline.taskConsumerID" placeholder="请选择">
                  <el-option
                    v-for="item in reciverList"
                    :key="item.userID"
                    :label="item.userID"
                    :value="item.userID">
                  </el-option>
                </el-select>
            </el-form-item>
            <!-- 时间戳 -->
            <el-form-item label="完成日期" prop="taskPlanCompleteTime">
                <el-date-picker type="date" placeholder="选择日期" v-model="formInline.taskPlanCompleteTime" v-if="!flag"></el-date-picker>
                <el-input v-model="formInline.taskPlanCompleteTime" v-if="flag"></el-input>
            </el-form-item>
        </el-form>
        <el-button @click="clear" size="small" class="enquierBut">重置</el-button>
        <el-button size="mini" type="primary" @click="triggerClick">提交</el-button>
        <div class="editMap">
          <div v-if="isOpenMap" style="border:solid lightblue 1px;height:100%;marginTop:10px">
            <el-amap vid="amapCamera" :events="mapEvents" :center="center">
                <el-amap-marker :position="position" ></el-amap-marker>
            </el-amap>
          </div>
        </div>
    </div>
</template>

<script>
export default {
  inject: ['reload'],
  data () {
    var numberOnly = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('不能为空！'))
      } else if (isNaN(this.formInline[rule.fullField])) {
        callback(new Error('只能填数字！'))
      } else if (parseFloat(this.formInline[rule.fullField]) < 0) {
        callback(new Error('不能小于0！'))
      } else {
        this.formInline[rule.fullField] = parseFloat(this.formInline[rule.fullField])
        callback()
      }
    }
    var checkDirectAngleEnd = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('不能为空！'))
      } else if (isNaN(this.formInline[rule.fullField])) {
        callback(new Error('只能填数字！'))
      } else if (parseFloat(this.formInline[rule.fullField]) <= parseFloat(this.formInline.takePhotoDirectAngleBegin)) {
        callback(new Error('要比方向角起点大！'))
      } else if (parseFloat(this.formInline[rule.fullField]) < 0) {
        callback(new Error('不能小于0！'))
      } else {
        this.formInline[rule.fullField] = parseFloat(this.formInline[rule.fullField])
        callback()
      }
    }
    return {
      mapEvents: {
        'click': (e) => {
          this.formInline.takePhotoLongitude = e.lnglat.lng
          this.formInline.takePhotoLatitude = e.lnglat.lat
          this.position = [e.lnglat.lng, e.lnglat.lat]
          this.center = this.position
        }
      },
      formInline: {
        taskName: '',
        bscID: '',
        cellID: '',
        takePhotoLongitude: '',
        takePhotoLatitude: '',
        takePhotoAltitude: '',
        takePhotoElevationAngle: '',
        takePhotoDirectAngleBegin: '',
        takePhotoDirectAngleEnd: '',
        takePhotoDirectAngleRotate: '',
        takePhotoNum: '',
        taskProducerID: '',
        taskProduceTime: '',
        taskConsumerID: '',
        taskPlanCompleteTime: '',
        bscIDCellId: ''
      },
      formList: ['form1', 'form2', 'form3', 'form4', 'form5', 'form6'], // 表单列表
      rules: {
        taskName: [
          { required: true, message: '不能为空！', trigger: 'blur' }
        ],
        bscIDCellId: [
          { required: true, message: '不能为空！', trigger: 'blur' }
        ],
        takePhotoLongitude: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        takePhotoLatitude: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        takePhotoDirectAngleBegin: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        takePhotoDirectAngleEnd: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: checkDirectAngleEnd, trigger: 'blur' }
        ],
        takePhotoDirectAngleRotate: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        takePhotoAltitude: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        takePhotoElevationAngle: [
          { required: true, message: '不能为空！', trigger: 'blur' },
          { validator: numberOnly, trigger: 'blur' }
        ],
        taskConsumerID: [
          { required: true, message: '不能为空！', trigger: 'blur' }
        ],
        taskPlanCompleteTime: [
          { required: true, message: '不能为空！', trigger: 'blur' }
        ]
      },
      position: [113.564221, 22.370364],
      center: [], // 地图图标居中
      user: '',
      index: '',
      page: '',
      checkForm: [],
      flag: false, // 用于判断页面是任务编辑页面还是任务详情页面，任务详情页面不能对任务进行编辑
      unEdit: false, // 用于任务编辑页面的一些不能编辑项
      result: false, // 用于判断表格输入信息是否符合
      reciverList: [],
      cellList: [],
      bscList: [],
      missionList: [], // 储存所有的任务
      isOpenMap: true
    }
  },
  watch: {
    AngleEnd (newVal, oldVal) {
      this.countPhotoNum()
    },
    AngleBegin (newVal, oldVal) {
      this.countPhotoNum()
    },
    AngleRotate (newVal, oldVal) {
      this.countPhotoNum()
    },
    bscIDCellId (newVal, oldVal) {
      if (newVal) {
        var bscID = newVal.split('/')[0]
        var cellID = newVal.split('/')[1]
        for (var i of this.cellList) {
          if (i.bscID === bscID && i.cellID === cellID) {
            this.formInline.takePhotoLongitude = i.longitude
            this.formInline.takePhotoLatitude = i.latitude
            this.formInline.takePhotoAltitude = i.altitude
            this.formInline.takePhotoElevationAngle = i.elevationAngle
          }
        }
      } else {
        this.formInline.takePhotoLongitude = ''
        this.formInline.takePhotoLatitude = ''
        this.formInline.takePhotoAltitude = ''
        this.formInline.takePhotoElevationAngle = ''
      }
    },
    takePhotoLongitude (newVal, oldVal) {
      console.log(newVal)
      this.position = [newVal, this.takePhotoLatitude]
    },
    takePhotoLatitude (newVal, oldVal) {
      this.position = [this.takePhotoLatitude, newVal]
    }
  },
  computed: {
    AngleEnd () {
      return this.formInline.takePhotoDirectAngleEnd
    },
    AngleBegin () {
      return this.formInline.takePhotoDirectAngleBegin
    },
    AngleRotate () {
      return this.formInline.takePhotoDirectAngleRotate
    },
    bscIDCellId () {
      return this.formInline.bscIDCellId
    },
    takePhotoLongitude () {
      return this.formInline.takePhotoLongitude
    },
    takePhotoLatitude () {
      return this.formInline.takePhotoLatitude
    }
  },
  created () {
    this.center = this.position
    this.user = this.getCookie('userID')
    this.index = this.$route.params.index
    this.page = this.$route.params.page
    if (this.page === 'missionDetail') {
      this.flag = true
      this.getMissionAbout()
    } else if (this.page === 'missionEdit') {
      this.unEdit = true
      this.getMissionEdit()
    }
    this.getReciver()
    this.getCell()
  },
  methods: {
    clear () {
      for (var i in this.formInline) {
        this.formInline[i] = ''
      }
    },
    getCell () {
      let params = new URLSearchParams()
      let path = this.setAPIPath('cell')
      this.$axios
        .get(path, params)
        .then(response => {
          if (response.data.code === 0) {
            for (let i of response.data.data) {
              i.haveMission = false
              this.cellList.push(i)
            }
            this.getMission()
            // this.getBsc()
          } else {
            console.log('错误码：' + response.data.code)
          }
        })
        .catch(error => {
          console.log(error)
        })
    },
    getBsc () { // 设置bscList里的数据
      var flag
      for (var i = 0, len = this.cellList.length; i < len; i++) {
        flag = false
        for (var j = 0, len1 = this.bscList.length; j < len1; j++) {
          if (this.cellList[i].bscID === this.bscList[j].bscID) {
            flag = true
          }
        }
        if (!flag) {
          var obj = {
            bscID: this.cellList[i].bscID,
            bscName: this.cellList[i].bscName
          }
          this.bscList.push(obj)
        }
      }
    },
    getReciver () {
      let params = new URLSearchParams()
      let path = this.setAPIPath('getTakePhotoUser')
      this.$axios
        .get(path, params)
        .then(response => {
          if (response.data.code === 0) {
            for (let i of response.data.data) {
              this.reciverList.push(i)
            }
          }
        })
        .catch(error => {
          console.log(error)
        })
    },
    countPhotoNum () {
      if (this.formInline.takePhotoDirectAngleEnd < this.formInline.takePhotoDirectAngleBegin) {
        this.formInline.takePhotoNum = 0
      } else {
        this.formInline.takePhotoNum = Math.ceil((this.formInline.takePhotoDirectAngleEnd - this.formInline.takePhotoDirectAngleBegin) / this.formInline.takePhotoDirectAngleRotate)
      }
    },
    getMissionEdit () {
      this.formInline = this.getStorage(this.index)
    },
    getMissionAbout () {
      let params = new URLSearchParams()
      let path = this.setAPIPath('task/' + this.user)
      this.$axios
        .get(path, params)
        .then(response => {
          if (response.data.code === 0) {
            response.data.data[this.index].taskPlanCompleteTime = this.dateFormat(response.data.data[this.index].taskPlanCompleteTime)
            this.formInline = response.data.data[this.index]
          }
        })
        .catch(error => {
          console.log(error)
        })
    },
    addMission () {
      let params = new URLSearchParams()
      let path = this.setAPIPath('task')
      params.append('taskName', this.formInline.taskName) // string
      params.append('bscID', this.formInline.bscIDCellId.split('/')[0]) // string
      params.append('cellID', this.formInline.bscIDCellId.split('/')[1]) // string
      params.append('takePhotoLongitude', parseFloat(this.formInline.takePhotoLongitude)) // double
      params.append('takePhotoLatitude', parseFloat(this.formInline.takePhotoLatitude)) // double
      params.append('takePhotoAltitude', parseFloat(this.formInline.takePhotoAltitude)) // double
      params.append(
        'takePhotoElevationAngle',
        parseFloat(this.formInline.takePhotoElevationAngle) // float
      )
      params.append(
        'takePhotoDirectAngleBegin',
        parseFloat(this.formInline.takePhotoDirectAngleBegin) // float
      )
      params.append(
        'takePhotoDirectAngleEnd',
        parseFloat(this.formInline.takePhotoDirectAngleEnd) // float
      )
      params.append(
        'takePhotoDirectAngleRotate',
        parseFloat(this.formInline.takePhotoDirectAngleRotate) // float
      )
      params.append('takePhotoNum', parseInt(this.formInline.takePhotoNum)) // int
      params.append('taskProducerID', this.getCookie('userID')) // string
      params.append('taskProduceTime', parseInt(new Date().getTime() / 1000)) // int
      params.append('taskConsumerID', this.formInline.taskConsumerID) // string
      params.append('taskPlanCompleteTime', parseInt(this.formInline.taskPlanCompleteTime.getTime() / 1000)) // 时间戳
      this.$axios
        .post(path, params)
        .then(response => {
          if (response.data.code === 0) {
            this.openMsg('提交成功！', 'success', this)
            for (var i in this.formInline) {
              this.formInline[i] = ''
            }
          } else {
            this.openMsg('失败，错误码：' + response.data.code, 'error', this)
          }
        })
        .catch(error => {
          console.log(error)
        })
    },
    triggerClick () {
      // 将增加任务页面表格默认都是没验证
      for (var i = 0; i < this.formList.length; i++) {
        this.checkForm[i] = true
      }
      for (i = 0; i < this.formList.length; i++) {
        this.checkRule(this.formList[i], i)
      }
      this.checkForm.forEach(element => {
        this.result = this.result || element
      })
      if (!this.result) {
        this.addMission()
      } else {
        for (var j = 0; j < this.formList.length; j++) {
          this.checkForm[j] = true
        }
      }
      this.result = false
    },
    checkRule (formName, i) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          this.checkForm[i] = false
        } else {
          return false
        }
      })
    },
    checkCellListMission () {
      for (var i of this.cellList) {
        for (var j of this.missionList) {
          if (i.bscID === j.bscID && i.cellID === j.cellID) {
            i.haveMission = true
          }
        }
      }
    },
    getMission () {
      this.missionList.length = 0
      let params = new URLSearchParams()
      let path = this.setAPIPath('task/' + this.user)
      this.$axios
        .get(path, params)
        .then(response => {
          if (response.data.code === 0) {
            this.missionList = response.data.data
          }
          this.checkCellListMission()
        })
        .catch(error => {
          console.log(error)
        })
    }
  }
}
</script>

<style scoped>
.contain {
  /* border: 1px solid #ebeef5; */
  margin-top: 20px;
}
.single {
  margin-right: 325px;
}
/* .contain .el-form .newItem {
  position: relative;
  margin-right: 315px;
} */
.enquierBut{
  margin-left: 476px
}
@media screen and (max-width: 731px)  {
  .enquierBut{
    margin-left: 173px
  }
}
</style>
<style>
.mission .editMap .el-vue-amap-container .amap-container{
  min-height: 600px
}
.contain .el-date-editor {
  width: 180px;
}
.contain .el-select .el-input {
  width: 180px;
}
.el-input.is-disabled .el-input__inner{
  background-color: white
}
</style>
